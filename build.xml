<project name="polyglot" default="siggen" basedir=".">
	<description>
    Polyglot build file
  </description>
	

	<!-- set global properties for this build -->

	<!-- source directory -->
	<property name="src" location="${basedir}/src" />

	<!-- directory for class file targets -->
	<property name="classes" location="${basedir}/classes" />

	<!-- directory for jar files -->
	<property name="lib" location="${basedir}/lib" />

	<!-- distribution directory -->
	<property name="dist" location="${basedir}/dist/siggen" />

	<!-- binaries directory -->
	<property name="bin" location="${basedir}/bin" />

	<path id="standard.classpath">
		<pathelement location="${classes}" />
		<pathelement location="${lib}/java_cup.jar" />
		<pathelement location="${lib}/JFlex.jar" />
		<pathelement location="${lib}/polyglot.jar" />
		<pathelement location="${lib}/jif.jar" />
		<pathelement location="${lib}/jiflib.jar" />
		<pathelement location="${lib}/jifrt.jar" />
	</path>

	<target name="configure" description="Configures Polyglot" depends="check-classpath" unless="configure.up-to-date">
		<echo message="java version is ${java.version}" />
		<echo message="current directory is ${user.dir}" />
		<echo message="Java home directory is ${java.home}" />
		<property name="configure.up-to-date" value="true" />
	</target>

	<!-- Check that the class path is correct. -->
	<target name="check-classpath">
<!--     <available classname="java_cup.Main" property="cp_existence.java_cup"/>
    <available classname="JFlex.Main" property="cp_existence.jlex"/>
    <fail unless="cp_existence.java_cup" 
          message="The java_cup classes must be on the classpath. Try adding java_cup.jar to the classpath."/>
    <fail unless="cp_existence.jlex" 
          message="The JFlex classes must be on the classpath. Try adding JFlex.jar to the classpath."/>
-->	</target>

	<!-- create appropriate executables in the bin directory -->
	<target name="bin" depends="configure">
		<antcall target="siggenc" />
	</target>

	<target name="bin-deps">
		<dependset>
			<srcfileset dir="${bin}" includes="jlc.in" />
			<targetfileset dir="${bin}" includes="siggenc" />
		</dependset>
		<condition property="bin.up-to-date">
			<available file="${bin}/siggenc" />
		</condition>
	</target>

	<target name="defs-deps">
		<condition property="defs.up-to-date">
			<available file="${bin}/defs" />
		</condition>
	</target>

	<!-- creates a file containing common environment variable definitions -->
	<target name="executable-defs" depends="defs-deps" unless="defs.up-to-date">
		<echo message="Creating ${bin}/defs" />
		<echo file="${bin}/defs" append="no">#!/bin/sh
# DO NOT EDIT - This file was automatically generated.

JAVA='${java.home}/bin/java'
FILE_SEP='${file.separator}'
PATH_SEP='${path.separator}'
TOP='${basedir}'
    </echo>
	</target>

	<!-- creates the executable script jlc -->
	<target name="siggenc" depends="executable-defs">
		<echo message="Creating ${bin}/siggenc" />
		<concat destfile="${bin}/siggenc" append="no">
			<filelist dir="${bin}" files="defs" />
		</concat>
		<echo file="${bin}/siggenc" append="yes">
ext="siggen"

</echo>
		<concat destfile="${bin}/siggenc" append="yes">
			<filelist dir="${bin}" files="jlc.in" />
		</concat>

		<chmod perm="+x" file="${bin}/siggenc" />

		<delete file="${bin}/defs" />
	</target>

	<!-- Configure a single extension
       @param ${ext}         the name of the extension 
    -->
	<target name="configure-ext">
		<available file="configure-${ext}.xml" property="configure-ext.configure-available" />
		<antcall target="configure-ext-conditional" />
	</target>

	<target name="configure-ext-conditional" if="configure-ext.configure-available" depends="executable-defs">
		<ant antfile="configure-${ext}.xml" target="configure" inheritRefs="true" />
		<delete file="${bin}/defs" />
	</target>

	<!-- initialize the build -->
	<target name="init" depends="configure">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${classes}" />
		<mkdir dir="${bin}" />
	</target>

	<target name="clean" description="Cleans up the directory tree: deletes the distribution directory and the classes directories">
		<!-- Delete the ${classes} and ${dist} directory trees -->
		<delete dir="${classes}" />
		<delete dir="${dist}" />
	</target>

	<target name="clobber" depends="clean" description="Cleans up the directory tree and deletes generated files">
		<delete>
			<fileset dir="${src}">
				<include name="**/Grm.java" />
				<include name="**/sym.java" />
				<include name="**/Lexer_c.java" />
				<include name="**/*_ppg.cup" />
				<include name="${src}/ppg/parse/Constant.java" />
				<include name="${src}/ppg/parse/Grm.java" />
			</fileset>
		</delete>
		<delete>
			<fileset dir="${bin}">
				<include name="siggenc" />
				<include name="defs" />
			</fileset>
		</delete>
	</target>

	<!-- compile a single extension, named ${ext} -->
	<target name="compile-ext">
		<javac srcdir="${src}" destdir="${classes}" debug="on" includes="polyglot/ext/${ext}/**" excludes="**/qq/**,**/test/**,**/tests/**,**/runtime/**">
			<classpath refid="standard.classpath" />
			<!-- HACK: the excludes above wouldn't be necessary if we
           reorganized the source tree -->
		</javac>
	</target>

	<!-- Build a standard extension
       @param ext          The name of the extension.
       @param parser.type  Either "cup" or "ppg".
       @param base.parser  The base parser.  Pass in iff parser.type is "ppg".
       @param has-qq       Pass in iff the extension has a qq package.
   -->
	<target name="standard-ext">
		<antcall target="configure-ext" />
		<antcall target="compile-ext" />
	</target>

	<!-- siggen ext -->
	<target name="siggen" depends="init,bin">
		<antcall target="standard-ext">
			<param name="ext" value="siggen" />
			<!-- param name="parser.type" value="ppg" -->
			<!-- param name="base.parser" value="polyglot/ext/jl5/parse/java12.cup" -->
		</antcall>
	</target>

    <!-- distribution -->
    <target name="dist" description="generate the distribution">
        <!-- Create the distribution directory -->
        <mkdir dir="${dist}" />

        <!-- Clobber everything so we're in a clean state -->
        <antcall target="clobber" />

        <!-- Copy src files over. -->
        <copy todir="${dist}" includeEmptyDirs="no">
            <fileset dir="${basedir}" defaultexcludes="yes">
                <include name="src/**" />
                <include name="bin/*.in" />
                <include name="doc/**" />
                <include name="tests/**" />
                <include name="lib/*.jar" />
                <exclude name="*~" />
                <exclude name="*.svn*" />

                <include name="README" />
                <include name="LICENSE" />
                <include name="CHANGES" />
                <include name="build.xml" />
            </fileset>
        </copy>
     </target>


</project>
